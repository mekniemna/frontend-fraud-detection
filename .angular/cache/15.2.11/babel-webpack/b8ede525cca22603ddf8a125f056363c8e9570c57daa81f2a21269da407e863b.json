{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet JobListingsComponent = class JobListingsComponent {\n  constructor() {\n    this.jobs = [];\n    this.filteredJobs = [];\n    this.isLoading = true;\n    this.error = null;\n    this.searchTerm = '';\n    this.sortOption = 'newest';\n    this.currentPage = 1;\n    this.itemsPerPage = 6;\n    this.totalJobs = 0;\n    this.verifiedJobs = 0;\n    // Make Math available in the template\n    this.Math = Math;\n    // Sample job data for when API fails\n    this.sampleJobs = [{\n      id: 'job1',\n      title: 'Senior Frontend Developer',\n      company: 'TechGrowth Inc.',\n      location: 'San Francisco, CA (Remote)',\n      description: 'We are looking for an experienced Frontend Developer proficient in Angular, React, or Vue.js to join our growing team. You will be responsible for building user interfaces for our enterprise SaaS platform.',\n      requirements: 'At least 5 years of experience with modern JavaScript frameworks. Strong understanding of responsive design, accessibility, and performance optimization.',\n      salary: '$120,000 - $150,000',\n      industry: 'Technology',\n      companyProfile: 'TechGrowth is a leading SaaS provider with over 500 enterprise clients worldwide. Our platform helps businesses streamline their operations and increase productivity.',\n      createdAt: new Date('2025-05-20').toISOString(),\n      employmentType: 'Full-time',\n      benefits: ['Health insurance', 'Remote work', '401(k) matching', 'Unlimited PTO'],\n      requiredExperience: '5+ years',\n      requiredEducation: 'Bachelor\\'s degree'\n    }, {\n      id: 'job2',\n      title: 'UX/UI Designer',\n      company: 'Creative Solutions',\n      location: 'New York, NY',\n      description: 'Join our creative team to design beautiful and intuitive user experiences for our clients. You will collaborate with developers and product managers to create designs that delight users.',\n      requirements: 'Proficiency in Figma, Adobe XD, or Sketch. Experience with user research and usability testing. Portfolio demonstrating strong visual design skills.',\n      salary: '$90,000 - $110,000',\n      industry: 'Design',\n      companyProfile: 'Creative Solutions is a design agency that works with startups and established companies to create memorable brand experiences and digital products.',\n      createdAt: new Date('2025-05-15').toISOString(),\n      employmentType: 'Full-time',\n      benefits: ['Health insurance', 'Flexible hours', 'Creative workspace'],\n      requiredExperience: '3+ years',\n      requiredEducation: 'Bachelor\\'s degree in Design or related field'\n    }, {\n      id: 'job3',\n      title: 'Data Scientist',\n      company: 'DataInsights',\n      location: 'Boston, MA (Hybrid)',\n      description: 'We\\'re seeking a talented Data Scientist to help us extract insights from complex datasets. You will build machine learning models and work with our engineering team to implement data-driven solutions.',\n      requirements: 'Strong background in statistics and machine learning. Experience with Python, R, and SQL. Familiarity with big data technologies like Spark.',\n      salary: '$130,000 - $160,000',\n      industry: 'Data Science',\n      companyProfile: 'DataInsights helps companies make better decisions through advanced analytics and machine learning. We work with clients in finance, healthcare, and retail.',\n      createdAt: new Date('2025-05-25').toISOString(),\n      employmentType: 'Full-time',\n      benefits: ['Competitive salary', 'Health benefits', 'Continuing education allowance'],\n      requiredExperience: '4+ years',\n      requiredEducation: 'Master\\'s or PhD in Computer Science, Statistics, or related field'\n    }, {\n      id: 'job4',\n      title: 'DevOps Engineer',\n      company: 'CloudNative Systems',\n      location: 'Austin, TX (Remote)',\n      description: 'Help us build and maintain our cloud infrastructure. You will work with our development team to implement CI/CD pipelines, manage Kubernetes clusters, and ensure high availability of our services.',\n      requirements: 'Experience with AWS, Azure, or GCP. Knowledge of containerization technologies like Docker and Kubernetes. Familiarity with Infrastructure as Code tools like Terraform.',\n      salary: '$115,000 - $140,000',\n      industry: 'Cloud Computing',\n      companyProfile: 'CloudNative Systems provides cloud infrastructure solutions for businesses of all sizes. We help companies migrate to the cloud and optimize their infrastructure for performance and cost.',\n      createdAt: new Date('2025-05-10').toISOString(),\n      employmentType: 'Full-time',\n      benefits: ['Remote work', 'Flexible hours', 'Home office stipend'],\n      requiredExperience: '3+ years',\n      requiredEducation: 'Bachelor\\'s degree in Computer Science or equivalent experience'\n    }, {\n      id: 'job5',\n      title: 'Product Manager',\n      company: 'InnovateTech',\n      location: 'Seattle, WA',\n      description: 'Lead the development of our flagship product from conception to launch. You will work with cross-functional teams to define product requirements, create roadmaps, and ensure successful delivery.',\n      requirements: 'Experience managing software products. Strong analytical and communication skills. Ability to translate business needs into product features.',\n      salary: '$125,000 - $155,000',\n      industry: 'Product Management',\n      companyProfile: 'InnovateTech creates cutting-edge software solutions that help businesses automate their workflows and increase efficiency. Our products are used by thousands of companies worldwide.',\n      createdAt: new Date('2025-05-05').toISOString(),\n      employmentType: 'Full-time',\n      benefits: ['Competitive salary', 'Stock options', 'Health benefits'],\n      requiredExperience: '5+ years',\n      requiredEducation: 'Bachelor\\'s degree'\n    }, {\n      id: 'job6',\n      title: 'Backend Developer',\n      company: 'ServerSide Solutions',\n      location: 'Chicago, IL (Hybrid)',\n      description: 'Join our backend team to build scalable and reliable APIs and services. You will work with modern technologies to create the backbone of our applications.',\n      requirements: 'Proficiency in Node.js, Python, or Java. Experience with RESTful APIs and microservices architecture. Knowledge of database systems like PostgreSQL or MongoDB.',\n      salary: '$110,000 - $135,000',\n      industry: 'Technology',\n      companyProfile: 'ServerSide Solutions specializes in building robust backend systems for web and mobile applications. We work with startups and enterprise clients to create scalable solutions.',\n      createdAt: new Date('2025-05-18').toISOString(),\n      employmentType: 'Full-time',\n      benefits: ['Health insurance', 'Flexible hours', 'Professional development budget'],\n      requiredExperience: '3+ years',\n      requiredEducation: 'Bachelor\\'s degree in Computer Science or related field'\n    }];\n    this.verificationResults = {};\n  }\n  ngOnInit() {\n    this.loadJobs();\n  }\n  ngAfterViewInit() {\n    // Apply animations to job cards after view is initialized\n    setTimeout(() => {\n      this.animateJobCards();\n    }, 2000);\n  }\n  loadJobs() {\n    this.isLoading = true;\n    this.error = null;\n    // Simulate API delay\n    setTimeout(() => {\n      // Try to load from API first\n      this.jobs = this.sampleJobs;\n      this.applyFilters();\n      this.isLoading = false;\n    }, 1500); // Simulate network delay\n  }\n\n  animateJobCards() {\n    const jobCards = document.querySelectorAll('.job-card');\n    jobCards.forEach((card, index) => {\n      setTimeout(() => {\n        card.classList.add('fade-in');\n      }, 100 * index); // Stagger the animations\n    });\n  }\n\n  applyFilters() {\n    // Filter by search term and industry\n    let filtered = this.jobs;\n    // Apply search filter\n    if (this.searchTerm.trim() !== '') {\n      const searchTermLower = this.searchTerm.toLowerCase();\n      filtered = filtered.filter(job => job.title.toLowerCase().includes(searchTermLower) || job.description.toLowerCase().includes(searchTermLower) || job.companyProfile.toLowerCase().includes(searchTermLower) || job.location.toLowerCase().includes(searchTermLower));\n    }\n    // Apply sorting\n    if (this.sortOption === 'a-z') {\n      filtered = filtered.sort((a, b) => a.title.localeCompare(b.title));\n    } else if (this.sortOption === 'z-a') {\n      filtered = filtered.sort((a, b) => b.title.localeCompare(a.title));\n    } else if (this.sortOption === 'newest') {\n      // Assuming jobs have a createdAt field\n      filtered = filtered.sort((a, b) => {\n        const dateA = new Date(a.createdAt || 0);\n        const dateB = new Date(b.createdAt || 0);\n        return dateB.getTime() - dateA.getTime();\n      });\n    } else if (this.sortOption === 'oldest') {\n      filtered = filtered.sort((a, b) => {\n        const dateA = new Date(a.createdAt || 0);\n        const dateB = new Date(b.createdAt || 0);\n        return dateA.getTime() - dateB.getTime();\n      });\n    }\n    this.filteredJobs = filtered;\n  }\n  resetFilters() {\n    this.searchTerm = '';\n    this.sortOption = 'newest';\n    this.applyFilters();\n  }\n  getIndustryCategories() {\n    // Extract unique industry categories from jobs\n    const industries = new Set();\n    this.jobs.forEach(job => {\n      if (job.industry) {\n        industries.add(job.industry);\n      }\n    });\n    return Array.from(industries).sort();\n  }\n  /**\n   * Verifies a job and updates its status\n   */\n  verifyJob(jobId) {\n    // Skip if already verifying or verified\n    if (this.verificationResults[jobId] && (this.verificationResults[jobId].isVerifying || this.verificationResults[jobId].result)) {\n      return;\n    }\n    // Set loading state for this specific job\n    this.verificationResults[jobId] = {\n      isVerifying: true,\n      result: null\n    };\n    // Simulate API verification delay\n    setTimeout(() => {\n      // Simulate API response\n      const isFake = Math.random() > 0.7;\n      this.verificationResults[jobId] = {\n        isVerifying: false,\n        result: {\n          isFake: isFake,\n          message: isFake ? 'This job posting appears to be fraudulent' : 'This job posting appears to be legitimate',\n          details: isFake ? ['Company information could not be verified', 'Contact details are suspicious', 'Job description contains red flags'] : ['Company information verified', 'Contact details are legitimate', 'Job description appears authentic']\n        }\n      };\n      // Update verified jobs count\n      this.updateVerifiedJobsCount();\n      // Apply animation to the job card\n      this.applyVerificationAnimation(jobId);\n    }, 1500);\n  }\n  /**\n   * Updates the count of verified jobs\n   */\n  updateVerifiedJobsCount() {\n    this.verifiedJobs = Object.values(this.verificationResults).filter(result => result.result && !result.result.isFake).length;\n  }\n  /**\n   * Applies animation to the verified job card\n   */\n  applyVerificationAnimation(jobId) {\n    const jobCard = document.getElementById(`job-card-${jobId}`);\n    if (jobCard) {\n      jobCard.classList.add('pulse');\n      setTimeout(() => {\n        jobCard.classList.remove('pulse');\n      }, 600);\n    }\n  }\n  truncateText(text, maxLength) {\n    if (text.length <= maxLength) {\n      return text;\n    }\n    return text.substring(0, maxLength) + '...';\n  }\n  onCardClick(event, jobId) {\n    // Don't trigger for clicks on buttons or links inside the card\n    if (event.target instanceof HTMLElement && (event.target.tagName === 'BUTTON' || event.target.tagName === 'A' || event.target.closest('button') || event.target.closest('a'))) {\n      return;\n    }\n    // If job has not been verified yet, verify it\n    if (jobId && !this.verificationResults[jobId]) {\n      this.verifyJob(parseInt(jobId));\n    }\n  }\n  // Add missing expandDescription method\n  expandDescription(jobId) {\n    // This method would typically open a modal or expand the job details\n    console.log('Expanding description for job:', jobId);\n    // Find the job\n    const job = this.jobs.find(j => j.id === jobId);\n    if (job) {\n      // For demo purposes, just toggle a verification if not already done\n      if (!this.verificationResults[jobId]) {\n        this.verifyJob(parseInt(jobId));\n      }\n    }\n  }\n};\nJobListingsComponent = __decorate([Component({\n  selector: 'app-job-listings',\n  templateUrl: './job-listings.component.html',\n  styleUrls: ['./job-listings.component.css']\n})], JobListingsComponent);\nexport { JobListingsComponent };","map":{"version":3,"mappings":"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","names":["Component","JobListingsComponent","constructor","Math","id","title","company","location","description","requirements","salary","industry","companyProfile","createdAt","Date","toISOString","employmentType","benefits","requiredExperience","requiredEducation","ngOnInit","loadJobs","ngAfterViewInit","setTimeout","animateJobCards","isLoading","error","jobs","sampleJobs","applyFilters","jobCards","document","querySelectorAll","forEach","card","index","classList","add","filtered","searchTerm","trim","searchTermLower","toLowerCase","filter","job","includes","sortOption","sort","a","b","localeCompare","dateA","dateB","getTime","filteredJobs","resetFilters","getIndustryCategories","industries","Set","Array","from","verifyJob","jobId","verificationResults","isVerifying","result","isFake","random","message","details","updateVerifiedJobsCount","applyVerificationAnimation","verifiedJobs","Object","values","length","jobCard","getElementById","remove","truncateText","text","maxLength","substring","onCardClick","event","target","HTMLElement","tagName","closest","parseInt","expandDescription","console","log","find","j","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/yassine/Images/emna/job-checker-app/src/app/pages/job-listings/job-listings.component.ts"],"sourcesContent":["import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport { Job } from '../../models/job.model';\n\n@Component({\n  selector: 'app-job-listings',\n  templateUrl: './job-listings.component.html',\n  styleUrls: ['./job-listings.component.css']\n})\nexport class JobListingsComponent implements OnInit, AfterViewInit {\n  jobs: Job[] = [];\n  filteredJobs: Job[] = [];\n  isLoading: boolean = true;\n  error: string | null = null;\n  searchTerm: string = '';\n  sortOption: string = 'newest';\n  currentPage: number = 1;\n  itemsPerPage: number = 6;\n  totalJobs: number = 0;\n  verifiedJobs: number = 0;\n  // Make Math available in the template\n  Math = Math;\n  \n  // Sample job data for when API fails\n  sampleJobs: Job[] = [\n    {\n      id: 'job1',\n      title: 'Senior Frontend Developer',\n      company: 'TechGrowth Inc.',\n      location: 'San Francisco, CA (Remote)',\n      description: 'We are looking for an experienced Frontend Developer proficient in Angular, React, or Vue.js to join our growing team. You will be responsible for building user interfaces for our enterprise SaaS platform.',\n      requirements: 'At least 5 years of experience with modern JavaScript frameworks. Strong understanding of responsive design, accessibility, and performance optimization.',\n      salary: '$120,000 - $150,000',\n      industry: 'Technology',\n      companyProfile: 'TechGrowth is a leading SaaS provider with over 500 enterprise clients worldwide. Our platform helps businesses streamline their operations and increase productivity.',\n      createdAt: new Date('2025-05-20').toISOString(),\n      employmentType: 'Full-time',\n      benefits: ['Health insurance', 'Remote work', '401(k) matching', 'Unlimited PTO'],\n      requiredExperience: '5+ years',\n      requiredEducation: 'Bachelor\\'s degree'\n    },\n    {\n      id: 'job2',\n      title: 'UX/UI Designer',\n      company: 'Creative Solutions',\n      location: 'New York, NY',\n      description: 'Join our creative team to design beautiful and intuitive user experiences for our clients. You will collaborate with developers and product managers to create designs that delight users.',\n      requirements: 'Proficiency in Figma, Adobe XD, or Sketch. Experience with user research and usability testing. Portfolio demonstrating strong visual design skills.',\n      salary: '$90,000 - $110,000',\n      industry: 'Design',\n      companyProfile: 'Creative Solutions is a design agency that works with startups and established companies to create memorable brand experiences and digital products.',\n      createdAt: new Date('2025-05-15').toISOString(),\n      employmentType: 'Full-time',\n      benefits: ['Health insurance', 'Flexible hours', 'Creative workspace'],\n      requiredExperience: '3+ years',\n      requiredEducation: 'Bachelor\\'s degree in Design or related field'\n    },\n    {\n      id: 'job3',\n      title: 'Data Scientist',\n      company: 'DataInsights',\n      location: 'Boston, MA (Hybrid)',\n      description: 'We\\'re seeking a talented Data Scientist to help us extract insights from complex datasets. You will build machine learning models and work with our engineering team to implement data-driven solutions.',\n      requirements: 'Strong background in statistics and machine learning. Experience with Python, R, and SQL. Familiarity with big data technologies like Spark.',\n      salary: '$130,000 - $160,000',\n      industry: 'Data Science',\n      companyProfile: 'DataInsights helps companies make better decisions through advanced analytics and machine learning. We work with clients in finance, healthcare, and retail.',\n      createdAt: new Date('2025-05-25').toISOString(),\n      employmentType: 'Full-time',\n      benefits: ['Competitive salary', 'Health benefits', 'Continuing education allowance'],\n      requiredExperience: '4+ years',\n      requiredEducation: 'Master\\'s or PhD in Computer Science, Statistics, or related field'\n    },\n    {\n      id: 'job4',\n      title: 'DevOps Engineer',\n      company: 'CloudNative Systems',\n      location: 'Austin, TX (Remote)',\n      description: 'Help us build and maintain our cloud infrastructure. You will work with our development team to implement CI/CD pipelines, manage Kubernetes clusters, and ensure high availability of our services.',\n      requirements: 'Experience with AWS, Azure, or GCP. Knowledge of containerization technologies like Docker and Kubernetes. Familiarity with Infrastructure as Code tools like Terraform.',\n      salary: '$115,000 - $140,000',\n      industry: 'Cloud Computing',\n      companyProfile: 'CloudNative Systems provides cloud infrastructure solutions for businesses of all sizes. We help companies migrate to the cloud and optimize their infrastructure for performance and cost.',\n      createdAt: new Date('2025-05-10').toISOString(),\n      employmentType: 'Full-time',\n      benefits: ['Remote work', 'Flexible hours', 'Home office stipend'],\n      requiredExperience: '3+ years',\n      requiredEducation: 'Bachelor\\'s degree in Computer Science or equivalent experience'\n    },\n    {\n      id: 'job5',\n      title: 'Product Manager',\n      company: 'InnovateTech',\n      location: 'Seattle, WA',\n      description: 'Lead the development of our flagship product from conception to launch. You will work with cross-functional teams to define product requirements, create roadmaps, and ensure successful delivery.',\n      requirements: 'Experience managing software products. Strong analytical and communication skills. Ability to translate business needs into product features.',\n      salary: '$125,000 - $155,000',\n      industry: 'Product Management',\n      companyProfile: 'InnovateTech creates cutting-edge software solutions that help businesses automate their workflows and increase efficiency. Our products are used by thousands of companies worldwide.',\n      createdAt: new Date('2025-05-05').toISOString(),\n      employmentType: 'Full-time',\n      benefits: ['Competitive salary', 'Stock options', 'Health benefits'],\n      requiredExperience: '5+ years',\n      requiredEducation: 'Bachelor\\'s degree'\n    },\n    {\n      id: 'job6',\n      title: 'Backend Developer',\n      company: 'ServerSide Solutions',\n      location: 'Chicago, IL (Hybrid)',\n      description: 'Join our backend team to build scalable and reliable APIs and services. You will work with modern technologies to create the backbone of our applications.',\n      requirements: 'Proficiency in Node.js, Python, or Java. Experience with RESTful APIs and microservices architecture. Knowledge of database systems like PostgreSQL or MongoDB.',\n      salary: '$110,000 - $135,000',\n      industry: 'Technology',\n      companyProfile: 'ServerSide Solutions specializes in building robust backend systems for web and mobile applications. We work with startups and enterprise clients to create scalable solutions.',\n      createdAt: new Date('2025-05-18').toISOString(),\n      employmentType: 'Full-time',\n      benefits: ['Health insurance', 'Flexible hours', 'Professional development budget'],\n      requiredExperience: '3+ years',\n      requiredEducation: 'Bachelor\\'s degree in Computer Science or related field'\n    }\n  ];\n\n  verificationResults: { [key: string]: { isVerifying: boolean, result?: any } } = {};\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.loadJobs();\n  }\n\n  ngAfterViewInit(): void {\n    // Apply animations to job cards after view is initialized\n    setTimeout(() => {\n      this.animateJobCards();\n    }, 2000);\n  }\n\n  loadJobs(): void {\n    this.isLoading = true;\n    this.error = null;\n    \n    // Simulate API delay\n    setTimeout(() => {\n      // Try to load from API first\n      this.jobs = this.sampleJobs;\n      this.applyFilters();\n      this.isLoading = false;\n    }, 1500); // Simulate network delay\n  }\n\n  animateJobCards(): void {\n    const jobCards = document.querySelectorAll('.job-card');\n    jobCards.forEach((card, index) => {\n      setTimeout(() => {\n        card.classList.add('fade-in');\n      }, 100 * index); // Stagger the animations\n    });\n  }\n\n  applyFilters(): void {\n    // Filter by search term and industry\n    let filtered = this.jobs;\n    \n    // Apply search filter\n    if (this.searchTerm.trim() !== '') {\n      const searchTermLower = this.searchTerm.toLowerCase();\n      filtered = filtered.filter(job => \n        job.title.toLowerCase().includes(searchTermLower) ||\n        job.description.toLowerCase().includes(searchTermLower) ||\n        job.companyProfile.toLowerCase().includes(searchTermLower) ||\n        job.location.toLowerCase().includes(searchTermLower)\n      );\n    }\n    \n    // Apply sorting\n    if (this.sortOption === 'a-z') {\n      filtered = filtered.sort((a, b) => a.title.localeCompare(b.title));\n    } else if (this.sortOption === 'z-a') {\n      filtered = filtered.sort((a, b) => b.title.localeCompare(a.title));\n    } else if (this.sortOption === 'newest') {\n      // Assuming jobs have a createdAt field\n      filtered = filtered.sort((a, b) => {\n        const dateA = new Date(a.createdAt || 0);\n        const dateB = new Date(b.createdAt || 0);\n        return dateB.getTime() - dateA.getTime();\n      });\n    } else if (this.sortOption === 'oldest') {\n      filtered = filtered.sort((a, b) => {\n        const dateA = new Date(a.createdAt || 0);\n        const dateB = new Date(b.createdAt || 0);\n        return dateA.getTime() - dateB.getTime();\n      });\n    }\n    \n    this.filteredJobs = filtered;\n  }\n\n  resetFilters(): void {\n    this.searchTerm = '';\n    this.sortOption = 'newest';\n    this.applyFilters();\n  }\n\n  getIndustryCategories(): string[] {\n    // Extract unique industry categories from jobs\n    const industries = new Set<string>();\n    this.jobs.forEach(job => {\n      if (job.industry) {\n        industries.add(job.industry);\n      }\n    });\n    return Array.from(industries).sort();\n  }\n\n  /**\n   * Verifies a job and updates its status\n   */\n  verifyJob(jobId: number): void {\n    // Skip if already verifying or verified\n    if (this.verificationResults[jobId] && \n        (this.verificationResults[jobId].isVerifying || this.verificationResults[jobId].result)) {\n      return;\n    }\n    \n    // Set loading state for this specific job\n    this.verificationResults[jobId] = {\n      isVerifying: true,\n      result: null\n    };\n    \n    // Simulate API verification delay\n    setTimeout(() => {\n      // Simulate API response\n      const isFake = Math.random() > 0.7;\n      \n      this.verificationResults[jobId] = {\n        isVerifying: false,\n        result: {\n          isFake: isFake,\n          message: isFake ? 'This job posting appears to be fraudulent' : 'This job posting appears to be legitimate',\n          details: isFake ? [\n            'Company information could not be verified',\n            'Contact details are suspicious',\n            'Job description contains red flags'\n          ] : [\n            'Company information verified',\n            'Contact details are legitimate',\n            'Job description appears authentic'\n          ]\n        }\n      };\n      \n      // Update verified jobs count\n      this.updateVerifiedJobsCount();\n      \n      // Apply animation to the job card\n      this.applyVerificationAnimation(jobId);\n    }, 1500);\n  }\n  \n  /**\n   * Updates the count of verified jobs\n   */\n  updateVerifiedJobsCount(): void {\n    this.verifiedJobs = Object.values(this.verificationResults)\n      .filter(result => result.result && !result.result.isFake)\n      .length;\n  }\n  \n  /**\n   * Applies animation to the verified job card\n   */\n  applyVerificationAnimation(jobId: number): void {\n    const jobCard = document.getElementById(`job-card-${jobId}`);\n    if (jobCard) {\n      jobCard.classList.add('pulse');\n      setTimeout(() => {\n        jobCard.classList.remove('pulse');\n      }, 600);\n    }\n  }\n\n  truncateText(text: string, maxLength: number): string {\n    if (text.length <= maxLength) {\n      return text;\n    }\n    return text.substring(0, maxLength) + '...';\n  }\n\n  onCardClick(event: MouseEvent, jobId?: string): void {\n    // Don't trigger for clicks on buttons or links inside the card\n    if (\n      event.target instanceof HTMLElement && \n      (event.target.tagName === 'BUTTON' || \n       event.target.tagName === 'A' ||\n       event.target.closest('button') ||\n       event.target.closest('a'))\n    ) {\n      return;\n    }\n\n    // If job has not been verified yet, verify it\n    if (jobId && !this.verificationResults[jobId]) {\n      this.verifyJob(parseInt(jobId));\n    }\n  }\n  \n  // Add missing expandDescription method\n  expandDescription(jobId: string): void {\n    // This method would typically open a modal or expand the job details\n    console.log('Expanding description for job:', jobId);\n    \n    // Find the job\n    const job = this.jobs.find(j => j.id === jobId);\n    if (job) {\n      // For demo purposes, just toggle a verification if not already done\n      if (!this.verificationResults[jobId]) {\n        this.verifyJob(parseInt(jobId));\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}