{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AnimateOnScrollDirective {\n  constructor(elementRef, renderer) {\n    this.elementRef = elementRef;\n    this.renderer = renderer;\n    this.animationClass = 'fade-in';\n    this.threshold = 0.1; // How much of element should be visible\n    this.animationDelay = 0; // Delay in ms\n    this.hasAnimated = false;\n    this.observer = null;\n  }\n  ngOnInit() {\n    // Initially hide the element\n    this.renderer.addClass(this.elementRef.nativeElement, 'opacity-0');\n    // Set up the intersection observer\n    this.setupIntersectionObserver();\n  }\n  setupIntersectionObserver() {\n    const options = {\n      root: null,\n      rootMargin: '0px',\n      threshold: this.threshold\n    };\n    this.observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting && !this.hasAnimated) {\n          // Element is now visible in the viewport\n          setTimeout(() => {\n            this.renderer.removeClass(this.elementRef.nativeElement, 'opacity-0');\n            this.renderer.addClass(this.elementRef.nativeElement, this.animationClass);\n            this.hasAnimated = true;\n          }, this.animationDelay);\n          // Once animated, no need to observe anymore\n          if (this.observer) {\n            this.observer.unobserve(this.elementRef.nativeElement);\n          }\n        }\n      });\n    }, options);\n    this.observer.observe(this.elementRef.nativeElement);\n  }\n  ngOnDestroy() {\n    // Clean up the observer when directive is destroyed\n    if (this.observer) {\n      this.observer.disconnect();\n      this.observer = null;\n    }\n  }\n  static {\n    this.ɵfac = function AnimateOnScrollDirective_Factory(t) {\n      return new (t || AnimateOnScrollDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n    };\n  }\n  static {\n    this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: AnimateOnScrollDirective,\n      selectors: [[\"\", \"appAnimateOnScroll\", \"\"]],\n      inputs: {\n        animationClass: \"animationClass\",\n        threshold: \"threshold\",\n        animationDelay: \"animationDelay\"\n      }\n    });\n  }\n}","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,wBAAwB;EAQnCC,YACUC,UAAsB,EACtBC,QAAmB;IADnB,eAAU,GAAVD,UAAU;IACV,aAAQ,GAARC,QAAQ;IATT,mBAAc,GAAW,SAAS;IAClC,cAAS,GAAW,GAAG,CAAC,CAAC;IACzB,mBAAc,GAAW,CAAC,CAAC,CAAC;IAE7B,gBAAW,GAAG,KAAK;IACnB,aAAQ,GAAgC,IAAI;EAKjD;EAEHC,QAAQ;IACN;IACA,IAAI,CAACD,QAAQ,CAACE,QAAQ,CAAC,IAAI,CAACH,UAAU,CAACI,aAAa,EAAE,WAAW,CAAC;IAElE;IACA,IAAI,CAACC,yBAAyB,EAAE;EAClC;EAEQA,yBAAyB;IAC/B,MAAMC,OAAO,GAAG;MACdC,IAAI,EAAE,IAAI;MACVC,UAAU,EAAE,KAAK;MACjBC,SAAS,EAAE,IAAI,CAACA;KACjB;IAED,IAAI,CAACC,QAAQ,GAAG,IAAIC,oBAAoB,CAAEC,OAAO,IAAI;MACnDA,OAAO,CAACC,OAAO,CAACC,KAAK,IAAG;QACtB,IAAIA,KAAK,CAACC,cAAc,IAAI,CAAC,IAAI,CAACC,WAAW,EAAE;UAC7C;UACAC,UAAU,CAAC,MAAK;YACd,IAAI,CAAChB,QAAQ,CAACiB,WAAW,CAAC,IAAI,CAAClB,UAAU,CAACI,aAAa,EAAE,WAAW,CAAC;YACrE,IAAI,CAACH,QAAQ,CAACE,QAAQ,CAAC,IAAI,CAACH,UAAU,CAACI,aAAa,EAAE,IAAI,CAACe,cAAc,CAAC;YAC1E,IAAI,CAACH,WAAW,GAAG,IAAI;UACzB,CAAC,EAAE,IAAI,CAACI,cAAc,CAAC;UAEvB;UACA,IAAI,IAAI,CAACV,QAAQ,EAAE;YACjB,IAAI,CAACA,QAAQ,CAACW,SAAS,CAAC,IAAI,CAACrB,UAAU,CAACI,aAAa,CAAC;;;MAG5D,CAAC,CAAC;IACJ,CAAC,EAAEE,OAAO,CAAC;IAEX,IAAI,CAACI,QAAQ,CAACY,OAAO,CAAC,IAAI,CAACtB,UAAU,CAACI,aAAa,CAAC;EACtD;EAEAmB,WAAW;IACT;IACA,IAAI,IAAI,CAACb,QAAQ,EAAE;MACjB,IAAI,CAACA,QAAQ,CAACc,UAAU,EAAE;MAC1B,IAAI,CAACd,QAAQ,GAAG,IAAI;;EAExB;;;uBAvDWZ,wBAAwB;IAAA;EAAA;;;YAAxBA,wBAAwB;MAAA2B;MAAAC;QAAAP;QAAAV;QAAAW;MAAA;IAAA;EAAA","names":["AnimateOnScrollDirective","constructor","elementRef","renderer","ngOnInit","addClass","nativeElement","setupIntersectionObserver","options","root","rootMargin","threshold","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","hasAnimated","setTimeout","removeClass","animationClass","animationDelay","unobserve","observe","ngOnDestroy","disconnect","selectors","inputs"],"sourceRoot":"","sources":["/home/yassine/Images/emna/job-checker-app/src/app/directives/animate-on-scroll.directive.ts"],"sourcesContent":["import { Directive, ElementRef, Input, OnInit, Renderer2, OnDestroy } from '@angular/core';\n\n@Directive({\n  selector: '[appAnimateOnScroll]'\n})\nexport class AnimateOnScrollDirective implements OnInit, OnDestroy {\n  @Input() animationClass: string = 'fade-in';\n  @Input() threshold: number = 0.1; // How much of element should be visible\n  @Input() animationDelay: number = 0; // Delay in ms\n  \n  private hasAnimated = false;\n  private observer: IntersectionObserver | null = null;\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnInit(): void {\n    // Initially hide the element\n    this.renderer.addClass(this.elementRef.nativeElement, 'opacity-0');\n    \n    // Set up the intersection observer\n    this.setupIntersectionObserver();\n  }\n\n  private setupIntersectionObserver(): void {\n    const options = {\n      root: null, // Use viewport as root\n      rootMargin: '0px',\n      threshold: this.threshold\n    };\n\n    this.observer = new IntersectionObserver((entries) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting && !this.hasAnimated) {\n          // Element is now visible in the viewport\n          setTimeout(() => {\n            this.renderer.removeClass(this.elementRef.nativeElement, 'opacity-0');\n            this.renderer.addClass(this.elementRef.nativeElement, this.animationClass);\n            this.hasAnimated = true;\n          }, this.animationDelay);\n          \n          // Once animated, no need to observe anymore\n          if (this.observer) {\n            this.observer.unobserve(this.elementRef.nativeElement);\n          }\n        }\n      });\n    }, options);\n\n    this.observer.observe(this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    // Clean up the observer when directive is destroyed\n    if (this.observer) {\n      this.observer.disconnect();\n      this.observer = null;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}