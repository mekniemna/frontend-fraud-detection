{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet JobListingsComponent = class JobListingsComponent {\n  constructor(jobService, renderer) {\n    this.jobService = jobService;\n    this.renderer = renderer;\n    this.jobs = [];\n    this.filteredJobs = [];\n    this.isLoading = true;\n    this.error = null;\n    this.searchTerm = '';\n    this.selectedFilter = 'all';\n    this.sortOption = 'newest';\n    this.verificationResults = {};\n    this.cardAnimationState = {};\n    this.animationDelayIncrement = 100; // ms between each card animation\n    this.isDarkMode = false;\n  }\n  ngOnInit() {\n    this.loadJobs();\n    this.checkDarkMode();\n  }\n  checkDarkMode() {\n    // Check if dark mode is enabled by looking at the html element's class\n    const htmlElement = document.documentElement;\n    this.isDarkMode = htmlElement.classList.contains('dark');\n    // Set up a mutation observer to watch for theme changes\n    const observer = new MutationObserver(mutations => {\n      mutations.forEach(mutation => {\n        if (mutation.attributeName === 'class') {\n          this.isDarkMode = htmlElement.classList.contains('dark');\n        }\n      });\n    });\n    observer.observe(htmlElement, {\n      attributes: true\n    });\n  }\n  loadJobs() {\n    this.isLoading = true;\n    this.error = null;\n    this.jobService.getJobs().subscribe({\n      next: jobs => {\n        this.jobs = jobs;\n        this.applyFilters();\n        this.isLoading = false;\n        // Initialize animation states for all jobs\n        setTimeout(() => {\n          this.jobs.forEach((job, index) => {\n            if (job.id) {\n              // Set initial state\n              this.cardAnimationState[job.id] = 'initial';\n              // Stagger the animations\n              setTimeout(() => {\n                if (job.id) {\n                  this.cardAnimationState[job.id] = 'visible';\n                }\n              }, index * this.animationDelayIncrement);\n            }\n          });\n        }, 0);\n      },\n      error: err => {\n        console.error('Error loading jobs:', err);\n        this.error = 'Failed to load jobs. Please try again later.';\n        this.isLoading = false;\n      }\n    });\n  }\n  applyFilters() {\n    // Filter by search term and industry\n    let filtered = this.jobs;\n    // Apply search filter\n    if (this.searchTerm.trim() !== '') {\n      const searchTermLower = this.searchTerm.toLowerCase();\n      filtered = filtered.filter(job => job.title.toLowerCase().includes(searchTermLower) || job.description.toLowerCase().includes(searchTermLower) || job.companyProfile.toLowerCase().includes(searchTermLower) || job.location.toLowerCase().includes(searchTermLower));\n    }\n    // Apply industry filter\n    if (this.selectedFilter !== 'all') {\n      filtered = filtered.filter(job => job.industry === this.selectedFilter);\n    }\n    // Apply sorting\n    if (this.sortOption === 'title') {\n      filtered = filtered.sort((a, b) => a.title.localeCompare(b.title));\n    } else if (this.sortOption === 'newest') {\n      // Assuming jobs are already sorted by newest in the API response\n      // If there's a date field, we could sort by that instead\n    }\n    this.filteredJobs = filtered;\n  }\n  resetFilters() {\n    this.searchTerm = '';\n    this.selectedFilter = 'all';\n    this.sortOption = 'newest';\n    this.applyFilters();\n  }\n  getIndustryCategories() {\n    // Extract unique industry categories from jobs\n    const industries = new Set();\n    this.jobs.forEach(job => {\n      if (job.industry) {\n        industries.add(job.industry);\n      }\n    });\n    return Array.from(industries).sort();\n  }\n  verifyJob(jobId) {\n    // If already verified, trigger pulse animation\n    if (this.verificationResults[jobId]?.result) {\n      if (this.cardAnimationState[jobId]) {\n        this.cardAnimationState[jobId] = 'pulse';\n        setTimeout(() => {\n          if (this.cardAnimationState[jobId]) {\n            this.cardAnimationState[jobId] = 'visible';\n          }\n        }, 600); // Match the pulse animation duration\n      }\n    }\n    // Set verifying state\n    this.verificationResults[jobId] = {\n      isVerifying: true\n    };\n    this.jobService.verifyJobById(jobId).subscribe({\n      next: result => {\n        this.verificationResults[jobId] = {\n          isVerifying: false,\n          result: result\n        };\n        // Trigger pulse animation after verification\n        if (this.cardAnimationState[jobId]) {\n          this.cardAnimationState[jobId] = 'pulse';\n          setTimeout(() => {\n            if (this.cardAnimationState[jobId]) {\n              this.cardAnimationState[jobId] = 'visible';\n            }\n          }, 600); // Match the pulse animation duration\n        }\n      },\n\n      error: err => {\n        console.error('Error verifying job:', err);\n        this.verificationResults[jobId] = {\n          isVerifying: false,\n          result: {\n            isFake: true,\n            message: 'Error verifying job',\n            details: ['An error occurred while trying to verify this job. Please try again later.']\n          }\n        };\n      }\n    });\n  }\n  truncateText(text, maxLength) {\n    if (text.length <= maxLength) {\n      return text;\n    }\n    return text.substring(0, maxLength) + '...';\n  }\n  onCardClick(event, jobId) {\n    // Don't trigger for clicks on buttons or links inside the card\n    if (event.target instanceof HTMLElement && (event.target.tagName === 'BUTTON' || event.target.tagName === 'A' || event.target.closest('button') || event.target.closest('a'))) {\n      return;\n    }\n    // If job has not been verified yet, verify it\n    if (jobId && !this.verificationResults[jobId]) {\n      this.verifyJob(jobId);\n    }\n    // If job has already been verified, trigger pulse animation\n    else if (jobId && this.cardAnimationState[jobId]) {\n      this.cardAnimationState[jobId] = 'pulse';\n      setTimeout(() => {\n        if (this.cardAnimationState[jobId]) {\n          this.cardAnimationState[jobId] = 'visible';\n        }\n      }, 600);\n    }\n  }\n};\nJobListingsComponent = __decorate([Component({\n  selector: 'app-job-listings',\n  templateUrl: './job-listings.component.html',\n  styleUrls: ['./job-listings.component.css']\n})], JobListingsComponent);\nexport { JobListingsComponent };","map":{"version":3,"mappings":"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","names":["Component","JobListingsComponent","constructor","jobService","renderer","ngOnInit","loadJobs","checkDarkMode","htmlElement","document","documentElement","isDarkMode","classList","contains","observer","MutationObserver","mutations","forEach","mutation","attributeName","observe","attributes","isLoading","error","getJobs","subscribe","next","jobs","applyFilters","setTimeout","job","index","id","cardAnimationState","animationDelayIncrement","err","console","filtered","searchTerm","trim","searchTermLower","toLowerCase","filter","title","includes","description","companyProfile","location","selectedFilter","industry","sortOption","sort","a","b","localeCompare","filteredJobs","resetFilters","getIndustryCategories","industries","Set","add","Array","from","verifyJob","jobId","verificationResults","result","isVerifying","verifyJobById","isFake","message","details","truncateText","text","maxLength","length","substring","onCardClick","event","target","HTMLElement","tagName","closest","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/yassine/Images/emna/job-checker-app/src/app/pages/job-listings/job-listings.component.ts"],"sourcesContent":["import { Component, OnInit, Renderer2 } from '@angular/core';\nimport { JobService } from '../../services/job.service';\nimport { Job, JobVerificationResult } from '../../models/job.model';\n\n@Component({\n  selector: 'app-job-listings',\n  templateUrl: './job-listings.component.html',\n  styleUrls: ['./job-listings.component.css']\n})\nexport class JobListingsComponent implements OnInit {\n  jobs: Job[] = [];\n  filteredJobs: Job[] = [];\n  isLoading: boolean = true;\n  error: string | null = null;\n  searchTerm: string = '';\n  selectedFilter: string = 'all';\n  sortOption: string = 'newest';\n  verificationResults: { [key: string]: { isVerifying: boolean, result?: JobVerificationResult } } = {};\n  cardAnimationState: { [key: string]: 'initial' | 'visible' | 'pulse' } = {};\n  animationDelayIncrement: number = 100; // ms between each card animation\n  isDarkMode: boolean = false;\n\n  constructor(\n    private jobService: JobService,\n    private renderer: Renderer2\n  ) { }\n\n  ngOnInit(): void {\n    this.loadJobs();\n    this.checkDarkMode();\n  }\n\n  private checkDarkMode(): void {\n    // Check if dark mode is enabled by looking at the html element's class\n    const htmlElement = document.documentElement;\n    this.isDarkMode = htmlElement.classList.contains('dark');\n    \n    // Set up a mutation observer to watch for theme changes\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.attributeName === 'class') {\n          this.isDarkMode = htmlElement.classList.contains('dark');\n        }\n      });\n    });\n    \n    observer.observe(htmlElement, { attributes: true });\n  }\n\n  loadJobs(): void {\n    this.isLoading = true;\n    this.error = null;\n    \n    this.jobService.getJobs().subscribe({\n      next: (jobs) => {\n        this.jobs = jobs;\n        this.applyFilters();\n        this.isLoading = false;\n        \n        // Initialize animation states for all jobs\n        setTimeout(() => {\n          this.jobs.forEach((job, index) => {\n            if (job.id) {\n              // Set initial state\n              this.cardAnimationState[job.id] = 'initial';\n              \n              // Stagger the animations\n              setTimeout(() => {\n                if (job.id) {\n                  this.cardAnimationState[job.id] = 'visible';\n                }\n              }, index * this.animationDelayIncrement);\n            }\n          });\n        }, 0);\n      },\n      error: (err) => {\n        console.error('Error loading jobs:', err);\n        this.error = 'Failed to load jobs. Please try again later.';\n        this.isLoading = false;\n      }\n    });\n  }\n\n  applyFilters(): void {\n    // Filter by search term and industry\n    let filtered = this.jobs;\n    \n    // Apply search filter\n    if (this.searchTerm.trim() !== '') {\n      const searchTermLower = this.searchTerm.toLowerCase();\n      filtered = filtered.filter(job => \n        job.title.toLowerCase().includes(searchTermLower) ||\n        job.description.toLowerCase().includes(searchTermLower) ||\n        job.companyProfile.toLowerCase().includes(searchTermLower) ||\n        job.location.toLowerCase().includes(searchTermLower)\n      );\n    }\n    \n    // Apply industry filter\n    if (this.selectedFilter !== 'all') {\n      filtered = filtered.filter(job => job.industry === this.selectedFilter);\n    }\n    \n    // Apply sorting\n    if (this.sortOption === 'title') {\n      filtered = filtered.sort((a, b) => a.title.localeCompare(b.title));\n    } else if (this.sortOption === 'newest') {\n      // Assuming jobs are already sorted by newest in the API response\n      // If there's a date field, we could sort by that instead\n    }\n    \n    this.filteredJobs = filtered;\n  }\n\n  resetFilters(): void {\n    this.searchTerm = '';\n    this.selectedFilter = 'all';\n    this.sortOption = 'newest';\n    this.applyFilters();\n  }\n\n  getIndustryCategories(): string[] {\n    // Extract unique industry categories from jobs\n    const industries = new Set<string>();\n    this.jobs.forEach(job => {\n      if (job.industry) {\n        industries.add(job.industry);\n      }\n    });\n    return Array.from(industries).sort();\n  }\n\n  verifyJob(jobId: string): void {\n    // If already verified, trigger pulse animation\n    if (this.verificationResults[jobId]?.result) {\n      if (this.cardAnimationState[jobId]) {\n        this.cardAnimationState[jobId] = 'pulse';\n        setTimeout(() => {\n          if (this.cardAnimationState[jobId]) {\n            this.cardAnimationState[jobId] = 'visible';\n          }\n        }, 600); // Match the pulse animation duration\n      }\n    }\n    \n    // Set verifying state\n    this.verificationResults[jobId] = { isVerifying: true };\n    \n    this.jobService.verifyJobById(jobId).subscribe({\n      next: (result) => {\n        this.verificationResults[jobId] = { \n          isVerifying: false, \n          result: result \n        };\n        \n        // Trigger pulse animation after verification\n        if (this.cardAnimationState[jobId]) {\n          this.cardAnimationState[jobId] = 'pulse';\n          setTimeout(() => {\n            if (this.cardAnimationState[jobId]) {\n              this.cardAnimationState[jobId] = 'visible';\n            }\n          }, 600); // Match the pulse animation duration\n        }\n      },\n      error: (err) => {\n        console.error('Error verifying job:', err);\n        this.verificationResults[jobId] = { \n          isVerifying: false, \n          result: {\n            isFake: true,\n            message: 'Error verifying job',\n            details: ['An error occurred while trying to verify this job. Please try again later.']\n          }\n        };\n      }\n    });\n  }\n\n  truncateText(text: string, maxLength: number): string {\n    if (text.length <= maxLength) {\n      return text;\n    }\n    return text.substring(0, maxLength) + '...';\n  }\n\n  onCardClick(event: MouseEvent, jobId?: string): void {\n    // Don't trigger for clicks on buttons or links inside the card\n    if (\n      event.target instanceof HTMLElement && \n      (event.target.tagName === 'BUTTON' || \n       event.target.tagName === 'A' ||\n       event.target.closest('button') ||\n       event.target.closest('a'))\n    ) {\n      return;\n    }\n\n    // If job has not been verified yet, verify it\n    if (jobId && !this.verificationResults[jobId]) {\n      this.verifyJob(jobId);\n    }\n    // If job has already been verified, trigger pulse animation\n    else if (jobId && this.cardAnimationState[jobId]) {\n      this.cardAnimationState[jobId] = 'pulse';\n      setTimeout(() => {\n        if (this.cardAnimationState[jobId]) {\n          this.cardAnimationState[jobId] = 'visible';\n        }\n      }, 600);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}