{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TooltipDirective {\n  constructor(el, renderer) {\n    this.el = el;\n    this.renderer = renderer;\n    this.tooltipText = '';\n    this.position = 'top';\n    this.delay = 300;\n    this.tooltipClass = '';\n    this.tooltipElement = null;\n  }\n  onMouseEnter() {\n    this.showTimeout = setTimeout(() => {\n      this.createTooltip();\n    }, this.delay);\n  }\n  onMouseLeave() {\n    if (this.showTimeout) {\n      clearTimeout(this.showTimeout);\n    }\n    if (this.tooltipElement) {\n      this.hideTimeout = setTimeout(() => {\n        this.removeTooltip();\n      }, 100);\n    }\n  }\n  createTooltip() {\n    // Create tooltip element\n    this.tooltipElement = this.renderer.createElement('div');\n    // Add content\n    this.renderer.setProperty(this.tooltipElement, 'textContent', this.tooltipText);\n    // Add classes\n    this.renderer.addClass(this.tooltipElement, 'tooltip');\n    this.renderer.addClass(this.tooltipElement, `tooltip-${this.position}`);\n    if (this.tooltipClass) {\n      const classes = this.tooltipClass.split(' ');\n      classes.forEach(className => {\n        this.renderer.addClass(this.tooltipElement, className);\n      });\n    }\n    // Set default styles\n    this.renderer.setStyle(this.tooltipElement, 'position', 'absolute');\n    this.renderer.setStyle(this.tooltipElement, 'background-color', 'rgba(0, 0, 0, 0.8)');\n    this.renderer.setStyle(this.tooltipElement, 'color', 'white');\n    this.renderer.setStyle(this.tooltipElement, 'padding', '5px 10px');\n    this.renderer.setStyle(this.tooltipElement, 'border-radius', '4px');\n    this.renderer.setStyle(this.tooltipElement, 'font-size', '12px');\n    this.renderer.setStyle(this.tooltipElement, 'z-index', '1000');\n    this.renderer.setStyle(this.tooltipElement, 'pointer-events', 'none');\n    this.renderer.setStyle(this.tooltipElement, 'white-space', 'nowrap');\n    this.renderer.setStyle(this.tooltipElement, 'opacity', '0');\n    this.renderer.setStyle(this.tooltipElement, 'transition', 'opacity 0.2s');\n    // Append to body\n    this.renderer.appendChild(document.body, this.tooltipElement);\n    // Position the tooltip\n    this.positionTooltip();\n    // Show with animation\n    setTimeout(() => {\n      if (this.tooltipElement) {\n        this.renderer.setStyle(this.tooltipElement, 'opacity', '1');\n      }\n    }, 20);\n  }\n  positionTooltip() {\n    if (!this.tooltipElement) return;\n    const hostRect = this.el.nativeElement.getBoundingClientRect();\n    const tooltipRect = this.tooltipElement.getBoundingClientRect();\n    const scrollY = window.scrollY || document.documentElement.scrollTop;\n    const scrollX = window.scrollX || document.documentElement.scrollLeft;\n    let top, left;\n    switch (this.position) {\n      case 'top':\n        top = hostRect.top + scrollY - tooltipRect.height - 10;\n        left = hostRect.left + scrollX + hostRect.width / 2 - tooltipRect.width / 2;\n        break;\n      case 'bottom':\n        top = hostRect.bottom + scrollY + 10;\n        left = hostRect.left + scrollX + hostRect.width / 2 - tooltipRect.width / 2;\n        break;\n      case 'left':\n        top = hostRect.top + scrollY + hostRect.height / 2 - tooltipRect.height / 2;\n        left = hostRect.left + scrollX - tooltipRect.width - 10;\n        break;\n      case 'right':\n        top = hostRect.top + scrollY + hostRect.height / 2 - tooltipRect.height / 2;\n        left = hostRect.right + scrollX + 10;\n        break;\n    }\n    // Ensure tooltip stays within viewport\n    if (left < 0) left = 0;\n    if (top < 0) top = 0;\n    if (left + tooltipRect.width > window.innerWidth) {\n      left = window.innerWidth - tooltipRect.width;\n    }\n    this.renderer.setStyle(this.tooltipElement, 'top', `${top}px`);\n    this.renderer.setStyle(this.tooltipElement, 'left', `${left}px`);\n  }\n  removeTooltip() {\n    if (this.tooltipElement) {\n      this.renderer.setStyle(this.tooltipElement, 'opacity', '0');\n      setTimeout(() => {\n        if (this.tooltipElement) {\n          this.renderer.removeChild(document.body, this.tooltipElement);\n          this.tooltipElement = null;\n        }\n      }, 200);\n    }\n  }\n  ngOnDestroy() {\n    if (this.showTimeout) {\n      clearTimeout(this.showTimeout);\n    }\n    if (this.hideTimeout) {\n      clearTimeout(this.hideTimeout);\n    }\n    this.removeTooltip();\n  }\n  static {\n    this.ɵfac = function TooltipDirective_Factory(t) {\n      return new (t || TooltipDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n    };\n  }\n  static {\n    this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: TooltipDirective,\n      selectors: [[\"\", \"appTooltip\", \"\"]],\n      hostBindings: function TooltipDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"mouseenter\", function TooltipDirective_mouseenter_HostBindingHandler() {\n            return ctx.onMouseEnter();\n          })(\"mouseleave\", function TooltipDirective_mouseleave_HostBindingHandler() {\n            return ctx.onMouseLeave();\n          });\n        }\n      },\n      inputs: {\n        tooltipText: [\"appTooltip\", \"tooltipText\"],\n        position: \"position\",\n        delay: \"delay\",\n        tooltipClass: \"tooltipClass\"\n      }\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["TooltipDirective","constructor","el","renderer","onMouseEnter","showTimeout","setTimeout","createTooltip","delay","onMouseLeave","clearTimeout","tooltipElement","hideTimeout","removeTooltip","createElement","setProperty","tooltipText","addClass","position","tooltipClass","classes","split","forEach","className","setStyle","appendChild","document","body","positionTooltip","hostRect","nativeElement","getBoundingClientRect","tooltipRect","scrollY","window","documentElement","scrollTop","scrollX","scrollLeft","top","left","height","width","bottom","right","innerWidth","removeChild","ngOnDestroy","selectors","hostBindings","ctx"],"sourceRoot":"","sources":["C:\\Users\\HP\\Downloads\\job-checker\\job-checker\\src\\app\\directives\\tooltip.directive.ts"],"sourcesContent":["import { Directive, ElementRef, HostListener, Input, OnDestroy, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[appTooltip]'\n})\nexport class TooltipDirective implements OnDestroy {\n  @Input('appTooltip') tooltipText: string = '';\n  @Input() position: 'top' | 'right' | 'bottom' | 'left' = 'top';\n  @Input() delay: number = 300;\n  @Input() tooltipClass: string = '';\n  \n  private tooltipElement: HTMLElement | null = null;\n  private showTimeout: any;\n  private hideTimeout: any;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2\n  ) {}\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.showTimeout = setTimeout(() => {\n      this.createTooltip();\n    }, this.delay);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    if (this.showTimeout) {\n      clearTimeout(this.showTimeout);\n    }\n    \n    if (this.tooltipElement) {\n      this.hideTimeout = setTimeout(() => {\n        this.removeTooltip();\n      }, 100);\n    }\n  }\n\n  private createTooltip(): void {\n    // Create tooltip element\n    this.tooltipElement = this.renderer.createElement('div');\n    \n    // Add content\n    this.renderer.setProperty(this.tooltipElement, 'textContent', this.tooltipText);\n    \n    // Add classes\n    this.renderer.addClass(this.tooltipElement, 'tooltip');\n    this.renderer.addClass(this.tooltipElement, `tooltip-${this.position}`);\n    \n    if (this.tooltipClass) {\n      const classes = this.tooltipClass.split(' ');\n      classes.forEach(className => {\n        this.renderer.addClass(this.tooltipElement, className);\n      });\n    }\n    \n    // Set default styles\n    this.renderer.setStyle(this.tooltipElement, 'position', 'absolute');\n    this.renderer.setStyle(this.tooltipElement, 'background-color', 'rgba(0, 0, 0, 0.8)');\n    this.renderer.setStyle(this.tooltipElement, 'color', 'white');\n    this.renderer.setStyle(this.tooltipElement, 'padding', '5px 10px');\n    this.renderer.setStyle(this.tooltipElement, 'border-radius', '4px');\n    this.renderer.setStyle(this.tooltipElement, 'font-size', '12px');\n    this.renderer.setStyle(this.tooltipElement, 'z-index', '1000');\n    this.renderer.setStyle(this.tooltipElement, 'pointer-events', 'none');\n    this.renderer.setStyle(this.tooltipElement, 'white-space', 'nowrap');\n    this.renderer.setStyle(this.tooltipElement, 'opacity', '0');\n    this.renderer.setStyle(this.tooltipElement, 'transition', 'opacity 0.2s');\n    \n    // Append to body\n    this.renderer.appendChild(document.body, this.tooltipElement);\n    \n    // Position the tooltip\n    this.positionTooltip();\n    \n    // Show with animation\n    setTimeout(() => {\n      if (this.tooltipElement) {\n        this.renderer.setStyle(this.tooltipElement, 'opacity', '1');\n      }\n    }, 20);\n  }\n\n  private positionTooltip(): void {\n    if (!this.tooltipElement) return;\n    \n    const hostRect = this.el.nativeElement.getBoundingClientRect();\n    const tooltipRect = this.tooltipElement.getBoundingClientRect();\n    \n    const scrollY = window.scrollY || document.documentElement.scrollTop;\n    const scrollX = window.scrollX || document.documentElement.scrollLeft;\n    \n    let top, left;\n    \n    switch (this.position) {\n      case 'top':\n        top = hostRect.top + scrollY - tooltipRect.height - 10;\n        left = hostRect.left + scrollX + (hostRect.width / 2) - (tooltipRect.width / 2);\n        break;\n      case 'bottom':\n        top = hostRect.bottom + scrollY + 10;\n        left = hostRect.left + scrollX + (hostRect.width / 2) - (tooltipRect.width / 2);\n        break;\n      case 'left':\n        top = hostRect.top + scrollY + (hostRect.height / 2) - (tooltipRect.height / 2);\n        left = hostRect.left + scrollX - tooltipRect.width - 10;\n        break;\n      case 'right':\n        top = hostRect.top + scrollY + (hostRect.height / 2) - (tooltipRect.height / 2);\n        left = hostRect.right + scrollX + 10;\n        break;\n    }\n    \n    // Ensure tooltip stays within viewport\n    if (left < 0) left = 0;\n    if (top < 0) top = 0;\n    if (left + tooltipRect.width > window.innerWidth) {\n      left = window.innerWidth - tooltipRect.width;\n    }\n    \n    this.renderer.setStyle(this.tooltipElement, 'top', `${top}px`);\n    this.renderer.setStyle(this.tooltipElement, 'left', `${left}px`);\n  }\n\n  private removeTooltip(): void {\n    if (this.tooltipElement) {\n      this.renderer.setStyle(this.tooltipElement, 'opacity', '0');\n      \n      setTimeout(() => {\n        if (this.tooltipElement) {\n          this.renderer.removeChild(document.body, this.tooltipElement);\n          this.tooltipElement = null;\n        }\n      }, 200);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.showTimeout) {\n      clearTimeout(this.showTimeout);\n    }\n    \n    if (this.hideTimeout) {\n      clearTimeout(this.hideTimeout);\n    }\n    \n    this.removeTooltip();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}