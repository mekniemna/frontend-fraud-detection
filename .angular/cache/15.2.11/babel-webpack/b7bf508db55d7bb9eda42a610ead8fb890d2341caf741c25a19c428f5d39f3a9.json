{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class RippleEffectComponent {\n  constructor(el, renderer) {\n    this.el = el;\n    this.renderer = renderer;\n    this.color = 'rgba(255, 255, 255, 0.3)';\n    this.duration = 800; // ms\n    this.centered = false;\n  }\n  onClick(event) {\n    if (this.centered) {\n      // Create ripple from center of element\n      const rect = this.el.nativeElement.getBoundingClientRect();\n      const centerX = rect.width / 2;\n      const centerY = rect.height / 2;\n      this.createRipple(rect.left + centerX, rect.top + centerY);\n    } else {\n      // Create ripple from click position\n      this.createRipple(event.clientX, event.clientY);\n    }\n  }\n  createRipple(x, y) {\n    // Get host element position\n    const rect = this.el.nativeElement.getBoundingClientRect();\n    // Calculate click position relative to the element\n    const relativeX = x - rect.left;\n    const relativeY = y - rect.top;\n    // Calculate the ripple size (should be the larger of width or height * 2)\n    const size = Math.max(rect.width, rect.height) * 2;\n    // Create the ripple element\n    const ripple = this.renderer.createElement('div');\n    // Set styles for the ripple\n    this.renderer.setStyle(ripple, 'position', 'absolute');\n    this.renderer.setStyle(ripple, 'width', `${size}px`);\n    this.renderer.setStyle(ripple, 'height', `${size}px`);\n    this.renderer.setStyle(ripple, 'border-radius', '50%');\n    this.renderer.setStyle(ripple, 'background', this.color);\n    this.renderer.setStyle(ripple, 'transform', 'scale(0)');\n    this.renderer.setStyle(ripple, 'transition', `transform ${this.duration}ms cubic-bezier(0.4, 0, 0.2, 1), opacity ${this.duration}ms cubic-bezier(0.4, 0, 0.2, 1)`);\n    this.renderer.setStyle(ripple, 'opacity', '1');\n    this.renderer.setStyle(ripple, 'pointer-events', 'none');\n    this.renderer.setStyle(ripple, 'left', `${relativeX - size / 2}px`);\n    this.renderer.setStyle(ripple, 'top', `${relativeY - size / 2}px`);\n    // Add the ripple to the host element\n    this.renderer.appendChild(this.el.nativeElement, ripple);\n    // Trigger the ripple animation\n    setTimeout(() => {\n      this.renderer.setStyle(ripple, 'transform', 'scale(1)');\n      this.renderer.setStyle(ripple, 'opacity', '0');\n    }, 0);\n    // Remove the ripple after animation completes\n    setTimeout(() => {\n      if (this.el.nativeElement.contains(ripple)) {\n        this.renderer.removeChild(this.el.nativeElement, ripple);\n      }\n    }, this.duration);\n  }\n  static {\n    this.ɵfac = function RippleEffectComponent_Factory(t) {\n      return new (t || RippleEffectComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RippleEffectComponent,\n      selectors: [[\"app-ripple-effect\"]],\n      hostBindings: function RippleEffectComponent_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function RippleEffectComponent_click_HostBindingHandler($event) {\n            return ctx.onClick($event);\n          });\n        }\n      },\n      inputs: {\n        color: \"color\",\n        duration: \"duration\",\n        centered: \"centered\"\n      },\n      decls: 0,\n      vars: 0,\n      template: function RippleEffectComponent_Template(rf, ctx) {},\n      styles: [\"[_nghost-%COMP%] {\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      width: 100%;\\n      height: 100%;\\n      overflow: hidden;\\n      border-radius: inherit;\\n      pointer-events: none;\\n      z-index: 0;\\n    }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJpcHBsZS1lZmZlY3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7SUFDSTtNQUNFLGtCQUFrQjtNQUNsQixNQUFNO01BQ04sT0FBTztNQUNQLFdBQVc7TUFDWCxZQUFZO01BQ1osZ0JBQWdCO01BQ2hCLHNCQUFzQjtNQUN0QixvQkFBb0I7TUFDcEIsVUFBVTtJQUNaIiwiZmlsZSI6InJpcHBsZS1lZmZlY3QuY29tcG9uZW50LnRzIiwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgOmhvc3Qge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgdG9wOiAwO1xuICAgICAgbGVmdDogMDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgIGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7XG4gICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgIHotaW5kZXg6IDA7XG4gICAgfVxuICAiXX0= */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9yaXBwbGUtZWZmZWN0L3JpcHBsZS1lZmZlY3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7SUFDSTtNQUNFLGtCQUFrQjtNQUNsQixNQUFNO01BQ04sT0FBTztNQUNQLFdBQVc7TUFDWCxZQUFZO01BQ1osZ0JBQWdCO01BQ2hCLHNCQUFzQjtNQUN0QixvQkFBb0I7TUFDcEIsVUFBVTtJQUNaOztBQUVKLGdyQkFBZ3JCIiwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgOmhvc3Qge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgdG9wOiAwO1xuICAgICAgbGVmdDogMDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgIGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7XG4gICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgIHotaW5kZXg6IDA7XG4gICAgfVxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["RippleEffectComponent","constructor","el","renderer","onClick","event","centered","rect","nativeElement","getBoundingClientRect","centerX","width","centerY","height","createRipple","left","top","clientX","clientY","x","y","relativeX","relativeY","size","Math","max","ripple","createElement","setStyle","color","duration","appendChild","setTimeout","contains","removeChild","selectors","hostBindings","ctx"],"sourceRoot":"","sources":["C:\\Users\\HP\\Downloads\\job-checker\\job-checker\\src\\app\\components\\ripple-effect\\ripple-effect.component.ts"],"sourcesContent":["import { Component, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';\n\n@Component({\n  selector: 'app-ripple-effect',\n  template: '',\n  styles: [`\n    :host {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      overflow: hidden;\n      border-radius: inherit;\n      pointer-events: none;\n      z-index: 0;\n    }\n  `]\n})\nexport class RippleEffectComponent {\n  @Input() color: string = 'rgba(255, 255, 255, 0.3)';\n  @Input() duration: number = 800; // ms\n  @Input() centered: boolean = false;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2\n  ) {}\n\n  @HostListener('click', ['$event'])\n  onClick(event: MouseEvent): void {\n    if (this.centered) {\n      // Create ripple from center of element\n      const rect = this.el.nativeElement.getBoundingClientRect();\n      const centerX = rect.width / 2;\n      const centerY = rect.height / 2;\n      this.createRipple(rect.left + centerX, rect.top + centerY);\n    } else {\n      // Create ripple from click position\n      this.createRipple(event.clientX, event.clientY);\n    }\n  }\n\n  createRipple(x: number, y: number): void {\n    // Get host element position\n    const rect = this.el.nativeElement.getBoundingClientRect();\n    \n    // Calculate click position relative to the element\n    const relativeX = x - rect.left;\n    const relativeY = y - rect.top;\n    \n    // Calculate the ripple size (should be the larger of width or height * 2)\n    const size = Math.max(rect.width, rect.height) * 2;\n    \n    // Create the ripple element\n    const ripple = this.renderer.createElement('div');\n    \n    // Set styles for the ripple\n    this.renderer.setStyle(ripple, 'position', 'absolute');\n    this.renderer.setStyle(ripple, 'width', `${size}px`);\n    this.renderer.setStyle(ripple, 'height', `${size}px`);\n    this.renderer.setStyle(ripple, 'border-radius', '50%');\n    this.renderer.setStyle(ripple, 'background', this.color);\n    this.renderer.setStyle(ripple, 'transform', 'scale(0)');\n    this.renderer.setStyle(ripple, 'transition', `transform ${this.duration}ms cubic-bezier(0.4, 0, 0.2, 1), opacity ${this.duration}ms cubic-bezier(0.4, 0, 0.2, 1)`);\n    this.renderer.setStyle(ripple, 'opacity', '1');\n    this.renderer.setStyle(ripple, 'pointer-events', 'none');\n    this.renderer.setStyle(ripple, 'left', `${relativeX - size / 2}px`);\n    this.renderer.setStyle(ripple, 'top', `${relativeY - size / 2}px`);\n    \n    // Add the ripple to the host element\n    this.renderer.appendChild(this.el.nativeElement, ripple);\n    \n    // Trigger the ripple animation\n    setTimeout(() => {\n      this.renderer.setStyle(ripple, 'transform', 'scale(1)');\n      this.renderer.setStyle(ripple, 'opacity', '0');\n    }, 0);\n    \n    // Remove the ripple after animation completes\n    setTimeout(() => {\n      if (this.el.nativeElement.contains(ripple)) {\n        this.renderer.removeChild(this.el.nativeElement, ripple);\n      }\n    }, this.duration);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}