{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { finalize } from 'rxjs/operators';\nlet JobListingsComponent = class JobListingsComponent {\n  constructor(jobService) {\n    this.jobService = jobService;\n    this.jobs = [];\n    this.isLoading = true;\n    this.error = null;\n    this.verificationResults = {};\n    this.filteredJobs = [];\n    this.searchTerm = '';\n    this.selectedFilter = 'all';\n    this.sortOption = 'newest';\n    // Animation states\n    this.cardAnimationState = {};\n  }\n  ngOnInit() {\n    this.loadJobs();\n  }\n  loadJobs() {\n    this.isLoading = true;\n    this.error = null;\n    this.jobService.getJobs().pipe(finalize(() => this.isLoading = false)).subscribe({\n      next: jobs => {\n        this.jobs = jobs;\n        this.filteredJobs = [...jobs];\n        // Initialize animation states\n        jobs.forEach(job => {\n          if (job.id) {\n            this.cardAnimationState[job.id] = 'initial';\n            setTimeout(() => {\n              if (job.id) this.cardAnimationState[job.id] = 'visible';\n            }, 100 + jobs.indexOf(job) * 50); // Staggered animation\n          }\n        });\n      },\n\n      error: err => {\n        console.error('Error loading jobs:', err);\n        this.error = 'Failed to load jobs. Please try again later.';\n      }\n    });\n  }\n  verifyJob(jobId) {\n    if (!jobId) return;\n    // Set verifying state\n    this.verificationResults[jobId] = {\n      isVerifying: true\n    };\n    this.jobService.verifyJobById(jobId).subscribe({\n      next: result => {\n        this.verificationResults[jobId] = {\n          isVerifying: false,\n          result\n        };\n        // Add animation for result\n        if (jobId) {\n          this.cardAnimationState[jobId] = 'pulse';\n          setTimeout(() => {\n            if (jobId) this.cardAnimationState[jobId] = 'visible';\n          }, 600);\n        }\n      },\n      error: err => {\n        console.error('Error verifying job:', err);\n        this.verificationResults[jobId] = {\n          isVerifying: false,\n          result: {\n            isFake: true,\n            message: 'Error verifying job. Please try again.'\n          }\n        };\n      }\n    });\n  }\n  applyFilters() {\n    let filtered = [...this.jobs];\n    // Apply search term filter\n    if (this.searchTerm) {\n      const term = this.searchTerm.toLowerCase();\n      filtered = filtered.filter(job => job.title.toLowerCase().includes(term) || job.location.toLowerCase().includes(term) || job.companyProfile.toLowerCase().includes(term) || job.industry.toLowerCase().includes(term));\n    }\n    // Apply category filter\n    if (this.selectedFilter !== 'all') {\n      filtered = filtered.filter(job => job.industry === this.selectedFilter);\n    }\n    // Apply sorting\n    if (this.sortOption === 'newest') {\n      // Assuming there's a createdAt field or using id as proxy for recency\n      filtered = filtered.sort((a, b) => {\n        return (b.id || '').localeCompare(a.id || '');\n      });\n    } else if (this.sortOption === 'title') {\n      filtered = filtered.sort((a, b) => a.title.localeCompare(b.title));\n    }\n    this.filteredJobs = filtered;\n  }\n  resetFilters() {\n    this.searchTerm = '';\n    this.selectedFilter = 'all';\n    this.sortOption = 'newest';\n    this.filteredJobs = [...this.jobs];\n  }\n  getIndustryCategories() {\n    // Extract unique industry values from jobs\n    const industries = new Set();\n    this.jobs.forEach(job => {\n      if (job.industry) industries.add(job.industry);\n    });\n    return Array.from(industries);\n  }\n  // Helper method to truncate text\n  truncateText(text, maxLength) {\n    if (!text) return '';\n    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;\n  }\n};\nJobListingsComponent = __decorate([Component({\n  selector: 'app-job-listings',\n  templateUrl: './job-listings.component.html',\n  styleUrls: ['./job-listings.component.css']\n})], JobListingsComponent);\nexport { JobListingsComponent };","map":{"version":3,"mappings":"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","names":["Component","finalize","JobListingsComponent","constructor","jobService","ngOnInit","loadJobs","isLoading","error","getJobs","pipe","subscribe","next","jobs","filteredJobs","forEach","job","id","cardAnimationState","setTimeout","indexOf","err","console","verifyJob","jobId","verificationResults","isVerifying","verifyJobById","result","isFake","message","applyFilters","filtered","searchTerm","term","toLowerCase","filter","title","includes","location","companyProfile","industry","selectedFilter","sortOption","sort","a","b","localeCompare","resetFilters","getIndustryCategories","industries","Set","add","Array","from","truncateText","text","maxLength","length","substring","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/yassine/Images/emna/job-checker-app/src/app/pages/job-listings/job-listings.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { JobService, Job, JobVerificationResult } from '../../services/job.service';\nimport { finalize } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-job-listings',\n  templateUrl: './job-listings.component.html',\n  styleUrls: ['./job-listings.component.css']\n})\nexport class JobListingsComponent implements OnInit {\n  jobs: Job[] = [];\n  isLoading = true;\n  error: string | null = null;\n  verificationResults: { [key: string]: { isVerifying: boolean, result?: JobVerificationResult } } = {};\n  filteredJobs: Job[] = [];\n  searchTerm = '';\n  selectedFilter = 'all';\n  sortOption = 'newest';\n  \n  // Animation states\n  cardAnimationState: { [key: string]: string } = {};\n\n  constructor(private jobService: JobService) { }\n\n  ngOnInit(): void {\n    this.loadJobs();\n  }\n\n  loadJobs(): void {\n    this.isLoading = true;\n    this.error = null;\n    \n    this.jobService.getJobs()\n      .pipe(\n        finalize(() => this.isLoading = false)\n      )\n      .subscribe({\n        next: (jobs) => {\n          this.jobs = jobs;\n          this.filteredJobs = [...jobs];\n          \n          // Initialize animation states\n          jobs.forEach(job => {\n            if (job.id) {\n              this.cardAnimationState[job.id] = 'initial';\n              setTimeout(() => {\n                if (job.id) this.cardAnimationState[job.id] = 'visible';\n              }, 100 + (jobs.indexOf(job) * 50)); // Staggered animation\n            }\n          });\n        },\n        error: (err) => {\n          console.error('Error loading jobs:', err);\n          this.error = 'Failed to load jobs. Please try again later.';\n        }\n      });\n  }\n\n  verifyJob(jobId: string): void {\n    if (!jobId) return;\n    \n    // Set verifying state\n    this.verificationResults[jobId] = { isVerifying: true };\n    \n    this.jobService.verifyJobById(jobId)\n      .subscribe({\n        next: (result) => {\n          this.verificationResults[jobId] = { \n            isVerifying: false, \n            result \n          };\n          \n          // Add animation for result\n          if (jobId) {\n            this.cardAnimationState[jobId] = 'pulse';\n            setTimeout(() => {\n              if (jobId) this.cardAnimationState[jobId] = 'visible';\n            }, 600);\n          }\n        },\n        error: (err) => {\n          console.error('Error verifying job:', err);\n          this.verificationResults[jobId] = { \n            isVerifying: false, \n            result: { \n              isFake: true, \n              message: 'Error verifying job. Please try again.' \n            } \n          };\n        }\n      });\n  }\n\n  applyFilters(): void {\n    let filtered = [...this.jobs];\n    \n    // Apply search term filter\n    if (this.searchTerm) {\n      const term = this.searchTerm.toLowerCase();\n      filtered = filtered.filter(job => \n        job.title.toLowerCase().includes(term) || \n        job.location.toLowerCase().includes(term) ||\n        job.companyProfile.toLowerCase().includes(term) ||\n        job.industry.toLowerCase().includes(term)\n      );\n    }\n    \n    // Apply category filter\n    if (this.selectedFilter !== 'all') {\n      filtered = filtered.filter(job => job.industry === this.selectedFilter);\n    }\n    \n    // Apply sorting\n    if (this.sortOption === 'newest') {\n      // Assuming there's a createdAt field or using id as proxy for recency\n      filtered = filtered.sort((a, b) => {\n        return (b.id || '').localeCompare(a.id || '');\n      });\n    } else if (this.sortOption === 'title') {\n      filtered = filtered.sort((a, b) => a.title.localeCompare(b.title));\n    }\n    \n    this.filteredJobs = filtered;\n  }\n\n  resetFilters(): void {\n    this.searchTerm = '';\n    this.selectedFilter = 'all';\n    this.sortOption = 'newest';\n    this.filteredJobs = [...this.jobs];\n  }\n  \n  getIndustryCategories(): string[] {\n    // Extract unique industry values from jobs\n    const industries = new Set<string>();\n    this.jobs.forEach(job => {\n      if (job.industry) industries.add(job.industry);\n    });\n    return Array.from(industries);\n  }\n  \n  // Helper method to truncate text\n  truncateText(text: string, maxLength: number): string {\n    if (!text) return '';\n    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}